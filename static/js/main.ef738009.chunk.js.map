{"version":3,"sources":["crud/context/Context.js","crud/component/Input.js","crud/component/ItemList.js","crud/component/Langueges.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["store","createContext","Input","useContext","handleInput","input","handleSubmit","onSubmit","e","name","value","onChange","type","required","ItemList","props","handleDelete","handleEdit","edit","className","id","course","onClick","Langueges","language","length","map","item","isEdit","App","useState","setInput","setLanguage","Provider","target","preventDefault","pre","filter","lan","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef738009.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const store = createContext();","import React, { useContext } from 'react'\r\nimport { store} from '../context/Context'\r\n\r\nconst Input = () => {\r\n\r\n  const {handleInput, input, handleSubmit} = useContext(store);\r\n\r\n  return (\r\n    <form onSubmit={e=>handleSubmit(e)}>\r\n      <input name='add_course' value={input} onChange={(e)=>handleInput(e)} type=\"text\" required />\r\n      <input type=\"submit\"/>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import React, { useContext } from 'react'\r\nimport { store } from '../context/Context'\r\n\r\nconst ItemList = (props) => {\r\n\r\n  const {handleDelete, handleEdit, handleInput, input} = useContext(store);\r\n  return (\r\n    <>\r\n      {!props.edit&&\r\n        (<div className='item' id={props.id}>\r\n            <span>{props.course}</span>\r\n            <span onClick={()=>handleEdit(props.id)}>Edit</span>\r\n            <span onClick={()=>handleDelete(props.id)} >Delete</span>\r\n          </div>)\r\n      }\r\n      {props.edit&&<div className='item' id={props.id}>\r\n        <input type=\"text\" value={input} onChange={(e)=>handleInput(e)} />\r\n        <button onClick={()=>handleEdit(props.id)}>Update</button>\r\n      </div> }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ItemList\r\n","import React, { useContext } from 'react'\r\nimport { store } from '../context/Context'\r\nimport ItemList from './ItemList';\r\n\r\nconst Langueges = () => {\r\n\r\n  const {language} = useContext(store);\r\n\r\n  return (\r\n    <div className='container'>\r\n      {language.length>0&&language.map(item=><ItemList course={item.course} id={item.id} edit={item.isEdit} />)}\r\n\r\n      {language.length===0&&<div id='null' className='item' >No course exist</div> }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Langueges\r\n","import React, { useState } from 'react';\r\nimport Input from './crud/component/Input';\r\nimport Langueges from './crud/component/Langueges';\r\nimport { store } from './crud/context/Context';\r\nimport './crud/component/style.scss'\r\nfunction App() {\r\n\r\n  const [input, setInput] = useState('');\r\n  const [language, setLanguage] = useState([])\r\n\r\n// update input\r\n  const handleInput = (e) => {\r\n    let input = e.target.value;\r\n    setInput(input);\r\n  }\r\n\r\n// add course\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLanguage(pre=>[...pre,{id:language.length,course:input,isEdit:false}]);\r\n    setInput('');\r\n  }\r\n\r\n// edit course\r\n  const handleDelete = (id) => {\r\n    let lan = language.filter((item)=>item.id!==id)\r\n    setLanguage(lan)\r\n  }\r\n\r\n// edit courses\r\n  const handleEdit = (id) => {\r\n    language.filter((item)=>{\r\n      // after edit\r\n      if(item.id===id){\r\n        if(item.isEdit){\r\n          return (item.course=input,\r\n          item.isEdit=false,\r\n          setInput(''))\r\n          // start edit\r\n        }else{\r\n          return(item.isEdit=true,\r\n          setInput(item.course))\r\n        }\r\n      }\r\n    return id})\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <store.Provider value={{handleInput, input, handleSubmit, language, handleEdit, handleDelete}}>\r\n        <h1>Add Courses</h1>\r\n        <Input />\r\n        <Langueges />\r\n      </store.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}